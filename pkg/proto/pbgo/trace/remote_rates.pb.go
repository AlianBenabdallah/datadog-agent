// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: datadog/trace/remote_rates.proto

package trace

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TargetTPS contains the targeted traces per second the agent should try to sample for a particular service and env
type TargetTPS struct {
	Service string  `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Env     string  `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Value   float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// Rank is the rank associated to this TargetTPS. Lower ranks of a same (env, service) are discarded
	// in favor of the highest rank.
	Rank uint32 `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	// Mechanism is the identifier of the mechanism that generated this TargetTPS
	Mechanism uint32 `protobuf:"varint,5,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
}

func (m *TargetTPS) Reset()      { *m = TargetTPS{} }
func (*TargetTPS) ProtoMessage() {}
func (*TargetTPS) Descriptor() ([]byte, []int) {
	return fileDescriptor_78c4b0da960c57a9, []int{0}
}
func (m *TargetTPS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetTPS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetTPS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetTPS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetTPS.Merge(m, src)
}
func (m *TargetTPS) XXX_Size() int {
	return m.Size()
}
func (m *TargetTPS) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetTPS.DiscardUnknown(m)
}

var xxx_messageInfo_TargetTPS proto.InternalMessageInfo

func (m *TargetTPS) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TargetTPS) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *TargetTPS) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TargetTPS) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TargetTPS) GetMechanism() uint32 {
	if m != nil {
		return m.Mechanism
	}
	return 0
}

// APMSampling is the list of target tps
type APMSampling struct {
	TargetTps []TargetTPS `protobuf:"bytes,1,rep,name=target_tps,json=targetTps,proto3" json:"target_tps"`
}

func (m *APMSampling) Reset()      { *m = APMSampling{} }
func (*APMSampling) ProtoMessage() {}
func (*APMSampling) Descriptor() ([]byte, []int) {
	return fileDescriptor_78c4b0da960c57a9, []int{1}
}
func (m *APMSampling) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APMSampling) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APMSampling.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APMSampling) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APMSampling.Merge(m, src)
}
func (m *APMSampling) XXX_Size() int {
	return m.Size()
}
func (m *APMSampling) XXX_DiscardUnknown() {
	xxx_messageInfo_APMSampling.DiscardUnknown(m)
}

var xxx_messageInfo_APMSampling proto.InternalMessageInfo

func (m *APMSampling) GetTargetTps() []TargetTPS {
	if m != nil {
		return m.TargetTps
	}
	return nil
}

func init() {
	proto.RegisterType((*TargetTPS)(nil), "datadog.trace.TargetTPS")
	proto.RegisterType((*APMSampling)(nil), "datadog.trace.APMSampling")
}

func init() { proto.RegisterFile("datadog/trace/remote_rates.proto", fileDescriptor_78c4b0da960c57a9) }

var fileDescriptor_78c4b0da960c57a9 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0x77, 0x04, 0x34, 0xb7, 0x84, 0xc4, 0x6c, 0x28, 0x36, 0xc6, 0x8c, 0x17, 0xaa, 0xab,
	0xee, 0x12, 0xad, 0x2d, 0xa4, 0x34, 0x9a, 0x90, 0x83, 0xca, 0x86, 0x2c, 0xb0, 0xae, 0x04, 0xee,
	0xf6, 0xb2, 0xb7, 0xd0, 0xea, 0x23, 0xf8, 0x18, 0x3e, 0x0a, 0x25, 0x25, 0x95, 0x91, 0xa5, 0xb1,
	0xe4, 0x11, 0x0c, 0x7b, 0xfe, 0x89, 0xdd, 0xf7, 0xfb, 0x66, 0x26, 0xf9, 0xe6, 0xa3, 0xe1, 0x44,
	0x58, 0x31, 0xd1, 0x2a, 0xb1, 0x46, 0x8c, 0x65, 0x62, 0x64, 0xa6, 0xad, 0x1c, 0x1a, 0x61, 0x65,
	0x19, 0x17, 0x46, 0x5b, 0xcd, 0x5a, 0xdf, 0x1b, 0xb1, 0xdf, 0x38, 0xeb, 0x28, 0xad, 0x74, 0xe2,
	0x47, 0xa3, 0xc5, 0x63, 0x72, 0x20, 0x0f, 0x5e, 0x55, 0x27, 0x9d, 0x67, 0x1a, 0x0c, 0x84, 0x51,
	0xd2, 0x0e, 0x7a, 0x7d, 0xc6, 0xe9, 0x49, 0x29, 0xcd, 0x72, 0x3a, 0x96, 0x1c, 0x42, 0x88, 0x82,
	0xf4, 0x07, 0xd9, 0x29, 0xad, 0xc9, 0x7c, 0xc9, 0x8f, 0xbc, 0x7b, 0x90, 0xac, 0x4d, 0x1b, 0x4b,
	0x31, 0x5f, 0x48, 0x5e, 0x0b, 0x21, 0x82, 0xb4, 0x02, 0xc6, 0x68, 0xdd, 0x88, 0x7c, 0xc6, 0xeb,
	0x21, 0x44, 0xad, 0xd4, 0x6b, 0x76, 0x4e, 0x83, 0x4c, 0x8e, 0x9f, 0x44, 0x3e, 0x2d, 0x33, 0xde,
	0xf0, 0x83, 0x3f, 0xa3, 0x73, 0x47, 0x9b, 0x37, 0xbd, 0xfb, 0xbe, 0xc8, 0x8a, 0xf9, 0x34, 0x57,
	0xec, 0x9a, 0x52, 0xeb, 0xf3, 0x0c, 0x6d, 0x51, 0x72, 0x08, 0x6b, 0x51, 0xf3, 0x92, 0xc7, 0xff,
	0xfe, 0x8a, 0x7f, 0x03, 0x77, 0xeb, 0xab, 0xf7, 0x0b, 0x92, 0x06, 0xd5, 0xc5, 0xa0, 0x28, 0xbb,
	0xb7, 0xeb, 0x2d, 0x92, 0xcd, 0x16, 0xc9, 0x7e, 0x8b, 0xf0, 0xe2, 0x10, 0xde, 0x1c, 0xc2, 0xca,
	0x21, 0xac, 0x1d, 0xc2, 0x87, 0x43, 0xf8, 0x74, 0x48, 0xf6, 0x0e, 0xe1, 0x75, 0x87, 0x64, 0xbd,
	0x43, 0xb2, 0xd9, 0x21, 0x79, 0x68, 0x17, 0x33, 0x55, 0xf5, 0x94, 0x14, 0x23, 0xa5, 0xab, 0x82,
	0x47, 0xc7, 0xde, 0xb9, 0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x40, 0xf5, 0xd3, 0x78, 0x01,
	0x00, 0x00,
}

func (this *TargetTPS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TargetTPS)
	if !ok {
		that2, ok := that.(TargetTPS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Env != that1.Env {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Mechanism != that1.Mechanism {
		return false
	}
	return true
}
func (this *APMSampling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APMSampling)
	if !ok {
		that2, ok := that.(APMSampling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TargetTps) != len(that1.TargetTps) {
		return false
	}
	for i := range this.TargetTps {
		if !this.TargetTps[i].Equal(&that1.TargetTps[i]) {
			return false
		}
	}
	return true
}
func (this *TargetTPS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&trace.TargetTPS{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Env: "+fmt.Sprintf("%#v", this.Env)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Mechanism: "+fmt.Sprintf("%#v", this.Mechanism)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APMSampling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&trace.APMSampling{")
	if this.TargetTps != nil {
		vs := make([]TargetTPS, len(this.TargetTps))
		for i := range vs {
			vs[i] = this.TargetTps[i]
		}
		s = append(s, "TargetTps: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRemoteRates(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TargetTPS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetTPS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetTPS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mechanism != 0 {
		i = encodeVarintRemoteRates(dAtA, i, uint64(m.Mechanism))
		i--
		dAtA[i] = 0x28
	}
	if m.Rank != 0 {
		i = encodeVarintRemoteRates(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintRemoteRates(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintRemoteRates(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APMSampling) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APMSampling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APMSampling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetTps) > 0 {
		for iNdEx := len(m.TargetTps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TargetTps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRemoteRates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRemoteRates(dAtA []byte, offset int, v uint64) int {
	offset -= sovRemoteRates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TargetTPS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovRemoteRates(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovRemoteRates(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Rank != 0 {
		n += 1 + sovRemoteRates(uint64(m.Rank))
	}
	if m.Mechanism != 0 {
		n += 1 + sovRemoteRates(uint64(m.Mechanism))
	}
	return n
}

func (m *APMSampling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TargetTps) > 0 {
		for _, e := range m.TargetTps {
			l = e.Size()
			n += 1 + l + sovRemoteRates(uint64(l))
		}
	}
	return n
}

func sovRemoteRates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRemoteRates(x uint64) (n int) {
	return sovRemoteRates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TargetTPS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TargetTPS{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Mechanism:` + fmt.Sprintf("%v", this.Mechanism) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APMSampling) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTargetTps := "[]TargetTPS{"
	for _, f := range this.TargetTps {
		repeatedStringForTargetTps += strings.Replace(strings.Replace(f.String(), "TargetTPS", "TargetTPS", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTargetTps += "}"
	s := strings.Join([]string{`&APMSampling{`,
		`TargetTps:` + repeatedStringForTargetTps + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRemoteRates(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TargetTPS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteRates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetTPS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetTPS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteRates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteRates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteRates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteRates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mechanism", wireType)
			}
			m.Mechanism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mechanism |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteRates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemoteRates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APMSampling) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteRates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APMSampling: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APMSampling: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteRates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteRates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetTps = append(m.TargetTps, TargetTPS{})
			if err := m.TargetTps[len(m.TargetTps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteRates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemoteRates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteRates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteRates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteRates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRemoteRates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRemoteRates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRemoteRates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRemoteRates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteRates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRemoteRates = fmt.Errorf("proto: unexpected end of group")
)
